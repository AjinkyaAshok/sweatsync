"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var VideoLooper = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(VideoLooper, _React$Component);
  function VideoLooper(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _defineProperty(_assertThisInitialized(_this), "togglePlayback", function (e) {
      e && e.preventDefault();
      var currentVideo = _this.state.isVideoCloneActive ? "videoClone" : "video";
      if (_this[currentVideo].paused) {
        _this[currentVideo].play();
        _this._frameId = requestAnimationFrame(_this.tick);
        _this.setState({
          isPlaying: true
        });
      } else {
        _this[currentVideo].pause();
        cancelAnimationFrame(_this._frameId);
        _this.setState({
          isPlaying: false
        });
      }
    });
    _defineProperty(_assertThisInitialized(_this), "tick", function () {
      _this._frameId = requestAnimationFrame(_this.tick);
      _this.state.isVideoCloneActive ? _this.checkLoopEnd(_this.videoClone, _this.video) : _this.checkLoopEnd(_this.video, _this.videoClone);
      if (_this.props.isDebugMode) {
        _this.setState({
          currentTime: _this.state.isVideoCloneActive ? (Math.round(_this.videoClone.currentTime * 100) / 100).toFixed(2) : (Math.round(_this.video.currentTime * 100) / 100).toFixed(2)
        });
      }
    });
    _this.state = {
      isVideoCloneActive: false,
      currentLoop: 0,
      isPlaying: false,
      currentTime: 0
    };
    return _this;
  }
  var _proto = VideoLooper.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.video.addEventListener("loadeddata", this.onLoadedVideo.bind(this));
    this.videoClone.addEventListener("loadeddata", this.onLoadedVideoClone.bind(this));
    this.video.addEventListener("ended", this.onEndedVideo.bind(this));
    this.videoClone.addEventListener("ended", this.onEndedVideo.bind(this));
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextVideo = this.state.isVideoCloneActive ? "video" : "videoClone";
    if (this.props.start !== prevProps.start && this.props.start < this.video.duration) {
      this[nextVideo].currentTime = Number(this.props.start);
    }
    if (this.props.speed !== prevProps.speed) {
      this.video.playbackRate = this.props.speed;
      this.videoClone.playbackRate = this.props.speed;
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    cancelAnimationFrame(this._frameId);
  };
  _proto.onLoadedVideo = function onLoadedVideo() {
    this.video.pause();
    this.props.autoPlay && this.togglePlayback();
    this.video.playbackRate = this.props.speed || 1;
  };
  _proto.onLoadedVideoClone = function onLoadedVideoClone() {
    this.videoClone.pause();
    this.videoClone.currentTime = this.props.start;
    this.videoClone.playbackRate = this.props.speed || 1;
  };
  _proto.checkLoopEnd = function checkLoopEnd(currentVideo, nextVideo) {
    var _this2 = this;
    if (currentVideo.currentTime >= this.props.end && (!this.props.loopCount || this.state.currentLoop < this.props.loopCount)) {
      nextVideo.play();
      this.setState({
        isVideoCloneActive: !this.state.isVideoCloneActive,
        currentLoop: this.state.currentLoop + 1
      }, function () {
        currentVideo.pause();
        setTimeout(function () {
          currentVideo.currentTime = _this2.props.start;
        }, 500);
      });
    }
  };
  _proto.onEndedVideo = function onEndedVideo() {
    cancelAnimationFrame(this._frameId);
    this.setState({
      currentLoop: 0,
      isPlaying: false
    });
  };
  _proto.render = function render() {
    var _this3 = this;
    return /*#__PURE__*/_react["default"].createElement(VideoContainer, _extends({
      onClick: this.togglePlayback
    }, this.props), /*#__PURE__*/_react["default"].createElement(PlayButton, _extends({}, this.state, this.props)), /*#__PURE__*/_react["default"].createElement(Video, _extends({
      ref: function ref(video) {
        _this3.video = video;
      },
      isVisible: true
    }, this.props), /*#__PURE__*/_react["default"].createElement("source", {
      src: this.props.source,
      type: "video/mp4"
    })), /*#__PURE__*/_react["default"].createElement(Video, _extends({
      ref: function ref(videoClone) {
        _this3.videoClone = videoClone;
      },
      className: "videoClone",
      isVisible: this.state.isVideoCloneActive
    }, this.props), /*#__PURE__*/_react["default"].createElement("source", {
      src: this.props.source,
      type: "video/mp4"
    })), this.props.isDebugMode && /*#__PURE__*/_react["default"].createElement(Debug, {
      isSplitView: this.props.isSplitView,
      isVideoCloneActive: this.state.isVideoCloneActive,
      currentTime: this.state.currentTime
    }));
  };
  return VideoLooper;
}(_react["default"].Component);
exports["default"] = VideoLooper;
_defineProperty(VideoLooper, "defaultProps", {
  speed: 1,
  loopCount: null,
  autoPlay: true,
  muted: true,
  isDebugMode: false,
  isSplitView: false,
  playsInline: true,
  width: "100%",
  height: "100vh",
  objectFit: "cover",
  objectPosition: "40%"
});
VideoLooper.propTypes = process.env.NODE_ENV !== "production" ? {
  source: _propTypes["default"].string.isRequired,
  start: _propTypes["default"].number.isRequired,
  end: _propTypes["default"].number.isRequired,
  speed: _propTypes["default"].number,
  loopCount: _propTypes["default"].number,
  autoPlay: _propTypes["default"].bool,
  muted: _propTypes["default"].bool,
  isDebugMode: _propTypes["default"].bool,
  isSplitView: _propTypes["default"].bool,
  playsInline: _propTypes["default"].bool,
  width: _propTypes["default"].string,
  height: _propTypes["default"].string,
  objectFit: _propTypes["default"].string,
  objectPosition: _propTypes["default"].string
} : {};
var Debug = function Debug(props) {
  return /*#__PURE__*/_react["default"].createElement(DebugContainer, {
    isSplitView: props.isSplitView
  }, /*#__PURE__*/_react["default"].createElement(DebugHeader, {
    isVisible: !props.isSplitView
  }, /*#__PURE__*/_react["default"].createElement("header", null, props.isVideoCloneActive ? "cloned video" : "main video")), /*#__PURE__*/_react["default"].createElement(DebugHeader, {
    isVisible: props.isSplitView,
    isSplitView: props.isSplitView
  }, /*#__PURE__*/_react["default"].createElement("header", null, "main video"), /*#__PURE__*/_react["default"].createElement("header", null, "cloned video")), /*#__PURE__*/_react["default"].createElement(DebugData, null, /*#__PURE__*/_react["default"].createElement("div", null, props.currentTime)));
};
var VideoContainer = _styledComponents["default"].div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  position: relative;\n  top: 0;\n  width: ", ";\n  height: ", ";\n  overflow: hidden;\n  background-color: black;\n  cursor: pointer;\n"])), function (props) {
  return props.width;
}, function (props) {
  return props.height;
});
var Video = _styledComponents["default"].video(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n  position: ", ";\n  object-fit: ", ";\n  object-position: ", ";\n  width: ", ";\n  height: 100%;\n  left: 0;\n  opacity: ", ";\n  &.videoClone {\n    filter: ", ";\n  }\n"])), function (props) {
  return props.isDebugMode && props.isSplitView ? "relative" : "absolute";
}, function (props) {
  return props.objectFit;
}, function (props) {
  return props.objectPosition;
}, function (props) {
  return props.isDebugMode && props.isSplitView ? "50%" : "100%";
}, function (props) {
  return props.isVisible || props.isDebugMode && props.isSplitView ? 1 : 0;
}, function (props) {
  return props.isDebugMode && props.isSplitView ? "grayscale(100%)" : "none";
});
var PlayButton = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n  z-index: 1;\n  position: absolute;\n  top: 50%;\n  left: ", ";\n  transform: translate(-50%, -50%);\n  border: 0;\n  background: transparent;\n  box-sizing: border-box;\n  width: 0;\n  height: 100px;\n  border-color: transparent transparent transparent #d6d6d644;\n  border-style: solid;\n  border-width: 50px 0 50px 75px;\n  opacity: ", ";\n  transition: opacity 0.3s;\n"])), function (props) {
  return props.isDebugMode && props.isSplitView ? props.isVideoCloneActive ? "75%" : "25%" : "50%";
}, function (props) {
  return props.isPlaying ? 0 : 1;
});
var DebugContainer = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  bottom: 2em;\n  right: ", ";\n  width: ", ";\n  font-family: \"Segoe UI\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\",\n    \"Helvetica Neue\", Arial, sans-serif;\n  line-height: 1;\n  user-select: none;\n"])), function (props) {
  return props.isSplitView ? "0" : "2em";
}, function (props) {
  return props.isSplitView ? "100%" : "auto";
});
var DebugHeader = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n  color: grey;\n  font-size: 1.4em;\n  font-weight: 200;\n  display: ", ";\n  text-align: center;\n  header {\n    display: ", ";\n    width: ", ";\n  }\n"])), function (props) {
  return props.isVisible ? "block" : "none";
}, function (props) {
  return props.isSplitView ? "inline-block" : "block";
}, function (props) {
  return props.isSplitView ? "50%" : "100%";
});
var DebugData = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n  text-align: center;\n  width: 100%;\n  z-index: 2;\n  div {\n    color: grey;\n    display: inline-block;\n    text-align: left;\n    font-size: 5em;\n    font-weight: 100;\n  }\n"])));
module.exports = exports.default;